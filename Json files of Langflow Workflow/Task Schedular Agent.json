{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "MongoDBAtlasVector",
            "id": "MongoDBAtlasVector-RSRCS",
            "name": "dataframe",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "ParserComponent-xUiWb",
            "inputTypes": [
              "DataFrame",
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-MongoDBAtlasVector-RSRCS{œdataTypeœ:œMongoDBAtlasVectorœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}-ParserComponent-xUiWb{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-xUiWbœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "MongoDBAtlasVector-RSRCS",
        "sourceHandle": "{œdataTypeœ:œMongoDBAtlasVectorœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "ParserComponent-xUiWb",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œParserComponent-xUiWbœ,œinputTypesœ:[œDataFrameœ,œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-OnlbZ",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-RoMYH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-OnlbZ{œdataTypeœ:œPromptœ,œidœ:œPrompt-OnlbZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-RoMYH{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-OnlbZ",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-OnlbZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-RoMYH",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParserComponent",
            "id": "ParserComponent-xUiWb",
            "name": "parsed_text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "care_plan",
            "id": "Prompt-OnlbZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ParserComponent-xUiWb{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-xUiWbœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}-Prompt-OnlbZ{œfieldNameœ:œcare_planœ,œidœ:œPrompt-OnlbZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ParserComponent-xUiWb",
        "sourceHandle": "{œdataTypeœ:œParserComponentœ,œidœ:œParserComponent-xUiWbœ,œnameœ:œparsed_textœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-OnlbZ",
        "targetHandle": "{œfieldNameœ:œcare_planœ,œidœ:œPrompt-OnlbZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ComposioGoogleCalendarAPIComponent",
            "id": "ComposioGoogleCalendarAPIComponent-S1x3W",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-RoMYH",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ComposioGoogleCalendarAPIComponent-S1x3W{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-S1x3Wœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-RoMYH{œfieldNameœ:œtoolsœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ComposioGoogleCalendarAPIComponent-S1x3W",
        "sourceHandle": "{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-S1x3Wœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-RoMYH",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-RoMYH",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "scheduled_task",
            "id": "Prompt-9wAFX",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Agent-RoMYH{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-Prompt-9wAFX{œfieldNameœ:œscheduled_taskœ,œidœ:œPrompt-9wAFXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Agent-RoMYH",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-9wAFX",
        "targetHandle": "{œfieldNameœ:œscheduled_taskœ,œidœ:œPrompt-9wAFXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-P3zgt",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "MongoDBAtlasVector-RSRCS",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-P3zgt{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-P3zgtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-MongoDBAtlasVector-RSRCS{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIEmbeddings-P3zgt",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-P3zgtœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "MongoDBAtlasVector-RSRCS",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-9wAFX",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenAIModel-Rd92W",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-9wAFX{œdataTypeœ:œPromptœ,œidœ:œPrompt-9wAFXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-Rd92W{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-Rd92Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-9wAFX",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-9wAFXœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-Rd92W",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-Rd92Wœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-Rd92W",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "TelegramMessageSender-XGcTf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-Rd92W{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Rd92Wœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TelegramMessageSender-XGcTf{œfieldNameœ:œmessageœ,œidœ:œTelegramMessageSender-XGcTfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-Rd92W",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Rd92Wœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TelegramMessageSender-XGcTf",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œTelegramMessageSender-XGcTfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ComposioGoogleCalendarAPIComponent",
            "id": "ComposioGoogleCalendarAPIComponent-7viXQ",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-RoMYH",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-ComposioGoogleCalendarAPIComponent-7viXQ{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-7viXQœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-RoMYH{œfieldNameœ:œtoolsœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ComposioGoogleCalendarAPIComponent-7viXQ",
        "sourceHandle": "{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-7viXQœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-RoMYH",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-RoMYHœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-g6F9n",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "MongoDBAtlasVector-csU5Y",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-g6F9n{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-g6F9nœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-MongoDBAtlasVector-csU5Y{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-csU5Yœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIEmbeddings-g6F9n",
        "sourceHandle": "{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-g6F9nœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "MongoDBAtlasVector-csU5Y",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œMongoDBAtlasVector-csU5Yœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-JOGgG",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-Uu1Oz",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-OpenAIModel-JOGgG{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-JOGgGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-Uu1Oz{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-Uu1Ozœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "OpenAIModel-JOGgG",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-JOGgGœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-Uu1Oz",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-Uu1Ozœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-Uu1Oz",
            "name": "structured_output_dataframe",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "MongoDBAtlasVector-csU5Y",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-StructuredOutput-Uu1Oz{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-Uu1Ozœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}-MongoDBAtlasVector-csU5Y{œfieldNameœ:œingest_dataœ,œidœ:œMongoDBAtlasVector-csU5Yœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "StructuredOutput-Uu1Oz",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-Uu1Ozœ,œnameœ:œstructured_output_dataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "MongoDBAtlasVector-csU5Y",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œMongoDBAtlasVector-csU5Yœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-RoMYH",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-Uu1Oz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Agent-RoMYH{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-Uu1Oz{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-Uu1Ozœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Agent-RoMYH",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-Uu1Oz",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-Uu1Ozœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-zTX12",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "search_query",
            "id": "MongoDBAtlasVector-RSRCS",
            "inputTypes": [
              "Message"
            ],
            "type": "query"
          }
        },
        "id": "reactflow__edge-TextInput-zTX12{œdataTypeœ:œTextInputœ,œidœ:œTextInput-zTX12œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-MongoDBAtlasVector-RSRCS{œfieldNameœ:œsearch_queryœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œinputTypesœ:[œMessageœ],œtypeœ:œqueryœ}",
        "selected": false,
        "source": "TextInput-zTX12",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-zTX12œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "MongoDBAtlasVector-RSRCS",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œMongoDBAtlasVector-RSRCSœ,œinputTypesœ:[œMessageœ],œtypeœ:œqueryœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-RoMYH",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-y3xB6",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-RoMYH{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-y3xB6{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y3xB6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-RoMYH",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-RoMYHœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-y3xB6",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-y3xB6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "MongoDBAtlasVector-RSRCS",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "category": "vectorstores",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "MongoDB Atlas Vector Store with search capabilities",
            "display_name": "MongoDB Atlas",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mongodb_atlas_cluster_uri",
              "enable_mtls",
              "mongodb_atlas_client_cert",
              "db_name",
              "collection_name",
              "index_name",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "insert_mode",
              "embedding",
              "number_of_results",
              "index_field",
              "filter_field",
              "number_dimensions",
              "similarity",
              "quantization"
            ],
            "frozen": false,
            "icon": "MongoDB",
            "key": "MongoDBAtlasVector",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "method": "search_documents",
                "name": "search_results",
                "required_inputs": [
                  "collection_name",
                  "db_name",
                  "enable_mtls",
                  "index_field",
                  "index_name",
                  "mongodb_atlas_cluster_uri",
                  "number_dimensions"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": false,
                "method": "as_dataframe",
                "name": "dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0005559042572704037,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import tempfile\nimport time\n\nimport certifi\nfrom langchain_community.vectorstores import MongoDBAtlasVectorSearch\nfrom pymongo.collection import Collection\nfrom pymongo.operations import SearchIndexModel\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, SecretStrInput, StrInput\nfrom langflow.schema import Data\n\n\nclass MongoVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"MongoDB Atlas\"\n    description = \"MongoDB Atlas Vector Store with search capabilities\"\n    name = \"MongoDBAtlasVector\"\n    icon = \"MongoDB\"\n    INSERT_MODES = [\"append\", \"overwrite\"]\n    SIMILARITY_OPTIONS = [\"cosine\", \"euclidean\", \"dotProduct\"]\n    QUANTIZATION_OPTIONS = [\"scalar\", \"binary\"]\n    inputs = [\n        SecretStrInput(name=\"mongodb_atlas_cluster_uri\", display_name=\"MongoDB Atlas Cluster URI\", required=True),\n        BoolInput(name=\"enable_mtls\", display_name=\"Enable mTLS\", value=False, advanced=True, required=True),\n        SecretStrInput(\n            name=\"mongodb_atlas_client_cert\",\n            display_name=\"MongoDB Atlas Combined Client Certificate\",\n            required=False,\n            info=\"Client Certificate combined with the private key in the following format:\\n \"\n            \"-----BEGIN PRIVATE KEY-----\\n...\\n -----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\\n\"\n            \"...\\n-----END CERTIFICATE-----\\n\",\n        ),\n        StrInput(name=\"db_name\", display_name=\"Database Name\", required=True),\n        StrInput(name=\"collection_name\", display_name=\"Collection Name\", required=True),\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            required=True,\n            info=\"The name of Atlas Search index, it should be a Vector Search.\",\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"insert_mode\",\n            display_name=\"Insert Mode\",\n            options=INSERT_MODES,\n            value=INSERT_MODES[0],\n            info=\"How to insert new documents into the collection.\",\n            advanced=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n        StrInput(\n            name=\"index_field\",\n            display_name=\"Index Field\",\n            advanced=True,\n            required=True,\n            info=\"The field to index.\",\n            value=\"embedding\",\n        ),\n        StrInput(\n            name=\"filter_field\", display_name=\"Filter Field\", advanced=True, info=\"The field to filter the index.\"\n        ),\n        IntInput(\n            name=\"number_dimensions\",\n            display_name=\"Number of Dimensions\",\n            info=\"Embedding Context Length.\",\n            value=1536,\n            advanced=True,\n            required=True,\n        ),\n        DropdownInput(\n            name=\"similarity\",\n            display_name=\"Similarity\",\n            options=SIMILARITY_OPTIONS,\n            value=SIMILARITY_OPTIONS[0],\n            info=\"The method used to measure the similarity between vectors.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"quantization\",\n            display_name=\"Quantization\",\n            options=QUANTIZATION_OPTIONS,\n            value=None,\n            info=\"Quantization reduces memory costs converting 32-bit floats to smaller data types\",\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> MongoDBAtlasVectorSearch:\n        try:\n            from pymongo import MongoClient\n        except ImportError as e:\n            msg = \"Please install pymongo to use MongoDB Atlas Vector Store\"\n            raise ImportError(msg) from e\n\n        # Create temporary files for the client certificate\n        if self.enable_mtls:\n            client_cert_path = None\n            try:\n                client_cert = self.mongodb_atlas_client_cert.replace(\" \", \"\\n\")\n                client_cert = client_cert.replace(\"-----BEGIN\\nPRIVATE\\nKEY-----\", \"-----BEGIN PRIVATE KEY-----\")\n                client_cert = client_cert.replace(\n                    \"-----END\\nPRIVATE\\nKEY-----\\n-----BEGIN\\nCERTIFICATE-----\",\n                    \"-----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\",\n                )\n                client_cert = client_cert.replace(\"-----END\\nCERTIFICATE-----\", \"-----END CERTIFICATE-----\")\n                with tempfile.NamedTemporaryFile(delete=False) as client_cert_file:\n                    client_cert_file.write(client_cert.encode(\"utf-8\"))\n                    client_cert_path = client_cert_file.name\n\n            except Exception as e:\n                msg = f\"Failed to write certificate to temporary file: {e}\"\n                raise ValueError(msg) from e\n\n        try:\n            mongo_client: MongoClient = (\n                MongoClient(\n                    self.mongodb_atlas_cluster_uri,\n                    tls=True,\n                    tlsCertificateKeyFile=client_cert_path,\n                    tlsCAFile=certifi.where(),\n                )\n                if self.enable_mtls\n                else MongoClient(self.mongodb_atlas_cluster_uri)\n            )\n\n            collection = mongo_client[self.db_name][self.collection_name]\n\n        except Exception as e:\n            msg = f\"Failed to connect to MongoDB Atlas: {e}\"\n            raise ValueError(msg) from e\n\n        # Convert DataFrame to Data if needed using parent's method\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            self.__insert_mode(collection)\n\n            return MongoDBAtlasVectorSearch.from_documents(\n                documents=documents, embedding=self.embedding, collection=collection, index_name=self.index_name\n            )\n        return MongoDBAtlasVectorSearch(embedding=self.embedding, collection=collection, index_name=self.index_name)\n\n    def search_documents(self) -> list[Data]:\n        from bson.objectid import ObjectId\n\n        vector_store = self.build_vector_store()\n\n        self.verify_search_index(vector_store._collection)\n\n        if self.search_query and isinstance(self.search_query, str):\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n            for doc in docs:\n                doc.metadata = {\n                    key: str(value) if isinstance(value, ObjectId) else value for key, value in doc.metadata.items()\n                }\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        return []\n\n    def __insert_mode(self, collection: Collection) -> None:\n        if self.insert_mode == \"overwrite\":\n            collection.delete_many({})  # Delete all documents while preserving collection structure\n\n    def verify_search_index(self, collection: Collection) -> None:\n        \"\"\"Verify if the search index exists, if not, create it.\n\n        Args:\n            collection (Collection): The collection to verify the search index on.\n        \"\"\"\n        indexes = collection.list_search_indexes()\n\n        index_names_types = {idx[\"name\"]: idx[\"type\"] for idx in indexes}\n        index_names = list(index_names_types.keys())\n        index_type = index_names_types.get(self.index_name)\n        if self.index_name not in index_names and index_type != \"vectorSearch\":\n            collection.create_search_index(self.__create_index_definition())\n\n            time.sleep(20)  # Give some time for index to be ready\n\n    def __create_index_definition(self) -> SearchIndexModel:\n        fields = [\n            {\n                \"type\": \"vector\",\n                \"path\": self.index_field,\n                \"numDimensions\": self.number_dimensions,\n                \"similarity\": self.similarity,\n                \"quantization\": self.quantization,\n            }\n        ]\n        if self.filter_field:\n            fields.append({\"type\": \"filter\", \"path\": self.filter_field})\n        return SearchIndexModel(definition={\"fields\": fields}, name=self.index_name, type=\"vectorSearch\")\n"
              },
              "collection_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "EHR"
              },
              "db_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Database Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "db_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Care_Plan"
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "enable_mtls": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Enable mTLS",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "enable_mtls",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "filter_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Filter Field",
                "dynamic": false,
                "info": "The field to filter the index.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "filter_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "index_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Index Field",
                "dynamic": false,
                "info": "The field to index.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_field",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "embedding"
              },
              "index_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "The name of Atlas Search index, it should be a Vector Search.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Search"
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "insert_mode": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Insert Mode",
                "dynamic": false,
                "info": "How to insert new documents into the collection.",
                "name": "insert_mode",
                "options": [
                  "append",
                  "overwrite"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "append"
              },
              "mongodb_atlas_client_cert": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "MongoDB Atlas Combined Client Certificate",
                "dynamic": false,
                "info": "Client Certificate combined with the private key in the following format:\n -----BEGIN PRIVATE KEY-----\n...\n -----END PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                "input_types": [],
                "load_from_db": false,
                "name": "mongodb_atlas_client_cert",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "mongodb_atlas_cluster_uri": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "MongoDB Atlas Cluster URI",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "mongodb_atlas_cluster_uri",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "number_dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Dimensions",
                "dynamic": false,
                "info": "Embedding Context Length.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_dimensions",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 768
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "quantization": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Quantization",
                "dynamic": false,
                "info": "Quantization reduces memory costs converting 32-bit floats to smaller data types",
                "name": "quantization",
                "options": [
                  "scalar",
                  "binary"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "similarity": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Similarity",
                "dynamic": false,
                "info": "The method used to measure the similarity between vectors.",
                "name": "similarity",
                "options": [
                  "cosine",
                  "euclidean",
                  "dotProduct"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "cosine"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "MongoDBAtlasVector"
        },
        "id": "MongoDBAtlasVector-RSRCS",
        "measured": {
          "height": 800,
          "width": 320
        },
        "position": {
          "x": 557.178315560534,
          "y": 52
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ParserComponent-xUiWb",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "processing",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
            "display_name": "Parser",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mode",
              "pattern",
              "input_data",
              "sep"
            ],
            "frozen": false,
            "icon": "braces",
            "key": "ParserComponent",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Parsed Text",
                "hidden": false,
                "method": "parse_combined_text",
                "name": "parsed_text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Clean Data",
                "dynamic": false,
                "info": "Enable to clean the data by removing empty rows and lines in each cell of the DataFrame/ Data object.",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
              },
              "input_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Data or DataFrame",
                "dynamic": false,
                "info": "Accepts either a DataFrame or a Data object.",
                "input_types": [
                  "DataFrame",
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_data",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "mode": {
                "_input_type": "TabInput",
                "advanced": false,
                "display_name": "Mode",
                "dynamic": false,
                "info": "Convert into raw string instead of using a template.",
                "name": "mode",
                "options": [
                  "Parser",
                  "Stringify"
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tab",
                "value": "Parser"
              },
              "pattern": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": true,
                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "pattern",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "sep": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "String used to separate rows/items.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sep",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParserComponent"
        },
        "id": "ParserComponent-xUiWb",
        "measured": {
          "height": 394,
          "width": 320
        },
        "position": {
          "x": 973.8561617614037,
          "y": 770.2836301945363
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-RoMYH",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "ReminderSchedulerAgent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "key": "Agent",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 1.1732828199964098e-19,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "input_types": [],
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4.1"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "input_types": [],
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "input_types": [],
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "id": "Agent-RoMYH",
        "measured": {
          "height": 624,
          "width": 320
        },
        "position": {
          "x": 1855.719246948251,
          "y": 211.00728334131475
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-OnlbZ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "care_plan"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "care_plan": {
                "advanced": false,
                "display_name": "care_plan",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "care_plan",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "# ReminderTanvi ShahSchedulerAgent - Medical Task Scheduler\n\nYOU ARE \"ReminderSchedulerAgent\" - A medical task scheduler that creates daily reminders from patient care plans.\n\n## YOUR JOB\nTake a care plan with medications and exercises, then create Google Calendar events for each task at the right time.\n\n## TOOLS YOU HAVE\n- GOOGLECALENDAR_GET_CURRENT_DATE_TIME (gets current time in Asia/Kolkata timezone)\n- GOOGLECALENDAR_CREATE_EVENT (creates calendar events)\n\n## INPUT FORMAT\nYou will receive a care plan object like this:\n{care_plan}\n\n## HOW TO SCHEDULE MEDICATIONS\nLook at each medication and extract:\n- Medicine name\n- How many times per day\n- When to take it\n\nExamples:\n- \"Insulin - 3 times/day before meals\" becomes:\n  - 7:45 AM: Take Insulin before breakfast\n  - 12:45 PM: Take Insulin before lunch  \n  - 6:45 PM: Take Insulin before dinner\n\n- \"Metformin 500mg - 2 times/day\" becomes:\n  - 8:00 AM: Take Metformin 500mg\n  - 8:00 PM: Take Metformin 500mg\n\n- \"Levothyroxine 50mcg - once/day before breakfast\" becomes:\n  - 7:30 AM: Take Levothyroxine 50mcg\n\n## HOW TO SCHEDULE EXERCISES\nLook at each exercise and extract:\n- Exercise type\n- Duration \n- When to do it\n\nExamples:\n- \"Light walking - 20 mins daily after dinner\" becomes:\n  - 7:30 PM: Do 20-minute light walking\n\n- \"Yoga - 30 mins daily morning\" becomes:\n  - 7:00 AM: Do 30-minute yoga session\n\n- \"Jogging - 15 mins every evening\" becomes:\n  - 6:00 PM: Do 15-minute jogging\n\n## TIMING RULES\nUse these default times:\n\nMORNING:\n- Before breakfast: 7:30 AM or 7:45 AM\n- Morning exercise: 7:00 AM\n- Once daily morning meds: 8:00 AM\n\nAFTERNOON: \n- Before lunch: 12:45 PM\n- Afternoon exercise: 4:00 PM\n- Once daily afternoon meds: 2:00 PM\n\nEVENING:\n- Before dinner: 6:45 PM  \n- After dinner: 7:30 PM\n- Evening exercise: 6:00 PM\n- Night meds: 9:00 PM\n\nTWICE DAILY MEDS:\n- First dose: 8:00 AM\n- Second dose: 8:00 PM\n\n## STEP BY STEP PROCESS\n\nSTEP 1: Get current time\nCall GOOGLECALENDAR_GET_CURRENT_DATE_TIME\n\nSTEP 2: Parse medications\nFor each medication in the medications array:\n- Extract medicine name, frequency, and timing\n- Assign appropriate times based on timing rules\n- If the scheduled time has already passed today, schedule for tomorrow at the same time\n\nSTEP 3: Parse exercises  \nFor each exercise in the exercises array:\n- Extract exercise type, duration, and timing\n- Assign appropriate times based on timing rules\n- If the scheduled time has already passed today, schedule for tomorrow at the same time\n\nSTEP 4: Create calendar events\nFor each task, call GOOGLECALENDAR_CREATE_EVENT with:\n- title: Short task description like \"Take Insulin\" or \"Do 20-minute walking\"\n- description: Full details with dosage/duration\n- start_time: Scheduled time in Asia/Kolkata timezone (format: YYYY-MM-DD HH:MM:SS)\n- duration: 5 minutes for medications, actual duration for exercises  \n- notification: Always set to 10 minutes before start time\n\nSTEP 5: Return JSON response\nAfter creating all events, return only this JSON format:\n\n  \"patient_id\": \"p_1008\",\n   \"name\" :\"Tanvi Shah\"\n  \"daily_reminders\": [\n    \"time\": \"7:45 AM\", \"task\": \"Take Insulin before breakfast\",\n    \"time\": \"12:45 PM\", \"task\": \"Take Insulin before lunch\",\n    \"time\": \"6:45 PM\", \"task\": \"Take Insulin before dinner\",\n    \"time\": \"7:30 PM\", \"task\": \"Do 20-minute light walking\"\n  ]\n\n\n## IMPORTANT REMINDERS\n- ALWAYS call GOOGLECALENDAR_GET_CURRENT_DATE_TIME first\n- ALWAYS create calendar events using GOOGLECALENDAR_CREATE_EVENT for each task\n- If current time has passed the scheduled time, schedule for tomorrow\n- PLEASE SET THE Reminder Notification Just Before 10  minutes Actaully that is set as Default 30 min < you have to change that setting to 10 minutes i Don't know DO this task Anyway along With others\n- Include patient_id in your final response\n- Return ONLY the JSON response, no extra text\n- Make sure all times are in Asia/Kolkata timezone\n\n## EXAMPLE WORKFLOW\n1. Receive care plan for patient p_1008\n2. Call GOOGLECALENDAR_GET_CURRENT_DATE_TIME \n3. Parse \"Insulin - 3 times/day before meals\" into 3 separate medication tasks\n4. Parse \"Light walking - 20 mins daily after dinner\" into 1 exercise task\n5. Create 4 calendar events total using GOOGLECALENDAR_CREATE_EVENT\n6. Return JSON with patient_id and daily_reminders array"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "id": "Prompt-OnlbZ",
        "measured": {
          "height": 412,
          "width": 320
        },
        "position": {
          "x": 1187.9597509587466,
          "y": 209.36256073128254
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ComposioGoogleCalendarAPIComponent-7viXQ",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "composio",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Google Calendar API",
            "display_name": "Google Calendar",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "GOOGLECALENDAR_LIST_CALENDARS_max_results",
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
              "GOOGLECALENDAR_LIST_CALENDARS_page_token",
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
              "GOOGLECALENDAR_FIND_EVENT_calendar_id",
              "GOOGLECALENDAR_FIND_EVENT_query",
              "GOOGLECALENDAR_FIND_EVENT_max_results",
              "GOOGLECALENDAR_FIND_EVENT_order_by",
              "GOOGLECALENDAR_FIND_EVENT_show_deleted",
              "GOOGLECALENDAR_FIND_EVENT_single_events",
              "GOOGLECALENDAR_FIND_EVENT_timeMax",
              "GOOGLECALENDAR_FIND_EVENT_timeMin",
              "GOOGLECALENDAR_FIND_EVENT_updated_min",
              "GOOGLECALENDAR_FIND_EVENT_event_types",
              "GOOGLECALENDAR_FIND_EVENT_page_token",
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
              "GOOGLECALENDAR_CREATE_EVENT_description",
              "GOOGLECALENDAR_CREATE_EVENT_eventType",
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_CREATE_EVENT_location",
              "GOOGLECALENDAR_CREATE_EVENT_summary",
              "GOOGLECALENDAR_CREATE_EVENT_transparency",
              "GOOGLECALENDAR_CREATE_EVENT_visibility",
              "GOOGLECALENDAR_CREATE_EVENT_timezone",
              "GOOGLECALENDAR_CREATE_EVENT_recurrence",
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_CREATE_EVENT_attendees",
              "GOOGLECALENDAR_CREATE_EVENT_send_updates",
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_event_id",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
              "GOOGLECALENDAR_QUICK_ADD_calendar_id",
              "GOOGLECALENDAR_QUICK_ADD_text",
              "GOOGLECALENDAR_QUICK_ADD_send_updates",
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
              "GOOGLECALENDAR_PATCH_CALENDAR_description",
              "GOOGLECALENDAR_PATCH_CALENDAR_location",
              "GOOGLECALENDAR_PATCH_CALENDAR_summary",
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_description",
              "GOOGLECALENDAR_UPDATE_EVENT_eventType",
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_UPDATE_EVENT_location",
              "GOOGLECALENDAR_UPDATE_EVENT_summary",
              "GOOGLECALENDAR_UPDATE_EVENT_transparency",
              "GOOGLECALENDAR_UPDATE_EVENT_visibility",
              "GOOGLECALENDAR_UPDATE_EVENT_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_UPDATE_EVENT_attendees",
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
              "GOOGLECALENDAR_UPDATE_EVENT_event_id"
            ],
            "frozen": false,
            "icon": "Googlecalendar",
            "key": "ComposioGoogleCalendarAPIComponent",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.03289318164829356,
            "template": {
              "GOOGLECALENDAR_CREATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar. `primary` for interacting with the primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Type",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_CREATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_DELETE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be deleted",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Title of the calendar to be duplicated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_FIND_EVENT_event_types": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Types",
                "dynamic": false,
                "info": "List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_event_types",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_FIND_EVENT_order_by": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Order By",
                "dynamic": false,
                "info": "The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_order_by",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted events (with status equals 'cancelled') in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_FIND_EVENT_single_events": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Single Events",
                "dynamic": false,
                "info": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_single_events",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMax": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemax",
                "dynamic": false,
                "info": "Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMax",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMin": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemin",
                "dynamic": false,
                "info": "Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMin",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_updated_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Updated Min",
                "dynamic": false,
                "info": "Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_updated_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Calendar Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 50
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Group Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Items",
                "dynamic": false,
                "info": "List of calendars ids for which to fetch",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Max",
                "dynamic": false,
                "info": "The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Min",
                "dynamic": false,
                "info": "The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Time zone used in the response. Optional. The default is UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "UTC"
              },
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be fetched. Default is 'primary'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_LIST_CALENDARS_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Min Access Role",
                "dynamic": false,
                "info": "The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted calendar list entries in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Hidden",
                "dynamic": false,
                "info": "Whether to show hidden entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sync Token",
                "dynamic": false,
                "info": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be updated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the calendar. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the calendar as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title/Summary",
                "dynamic": false,
                "info": "Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_summary",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_QUICK_ADD_send_updates": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "none"
              },
              "GOOGLECALENDAR_QUICK_ADD_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "The text describing the event to be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_text",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendee Email",
                "dynamic": false,
                "info": "Email address of the attendee to be removed",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "EventType",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be updated",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GOOGLECALENDAR_UPDATE_EVENT",
                    "name": "Update Google Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_REMOVE_ATTENDEE",
                    "name": "Remove Attendee From Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME",
                    "name": "Get Current Date And Time"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_QUICK_ADD",
                    "name": "Quick Add Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_LIST_CALENDARS",
                    "name": "List Google Calendars"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_EVENT",
                    "name": "Find Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_CREATE_EVENT",
                    "name": "Create Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_FREE_SLOTS",
                    "name": "Find Free Slots"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_PATCH_CALENDAR",
                    "name": "Patch Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CALENDAR",
                    "name": "Fetch Google Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DELETE_EVENT",
                    "name": "Delete Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DUPLICATE_CALENDAR",
                    "name": "Duplicate Calendar"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": ""
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGoogleCalendarAPIComponent(ComposioBaseComponent):\n    \"\"\"Google Calendar API component for interacting with Google Calendar services.\"\"\"\n\n    display_name: str = \"Google Calendar\"\n    description: str = \"Google Calendar API\"\n    icon = \"Googlecalendar\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"googlecalendar\"\n\n    _actions_data: dict = {\n        \"GOOGLECALENDAR_UPDATE_EVENT\": {\n            \"display_name\": \"Update Google Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_UPDATE_EVENT_description\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_location\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_REMOVE_ATTENDEE\": {\n            \"display_name\": \"Remove Attendee From Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\": {\n            \"display_name\": \"Get Current Date And Time\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\"],\n        },\n        \"GOOGLECALENDAR_QUICK_ADD\": {\n            \"display_name\": \"Quick Add Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n                \"GOOGLECALENDAR_QUICK_ADD_text\",\n                \"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            ],\n        },\n        \"GOOGLECALENDAR_LIST_CALENDARS\": {\n            \"display_name\": \"List Google Calendars\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_EVENT\": {\n            \"display_name\": \"Find Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_FIND_EVENT_query\",\n                \"GOOGLECALENDAR_FIND_EVENT_max_results\",\n                \"GOOGLECALENDAR_FIND_EVENT_order_by\",\n                \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n                \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n                \"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n                \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n                \"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_CREATE_EVENT\": {\n            \"display_name\": \"Create Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_CREATE_EVENT_description\",\n                \"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_CREATE_EVENT_location\",\n                \"GOOGLECALENDAR_CREATE_EVENT_summary\",\n                \"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS\": {\n            \"display_name\": \"Find Free Slots\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            ],\n        },\n        \"GOOGLECALENDAR_PATCH_CALENDAR\": {\n            \"display_name\": \"Patch Calendar\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CALENDAR\": {\n            \"display_name\": \"Fetch Google Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\"],\n        },\n        \"GOOGLECALENDAR_DELETE_EVENT\": {\n            \"display_name\": \"Delete Event\",\n            \"action_fields\": [\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\", \"GOOGLECALENDAR_DELETE_EVENT_event_id\"],\n        },\n        \"GOOGLECALENDAR_DUPLICATE_CALENDAR\": {\n            \"display_name\": \"Duplicate Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\"],\n        },\n    }\n\n    _list_variables = {\n        \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n        \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n        \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n        \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n        \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n            display_name=\"Min Access Role\",\n            info=\"The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted calendar list entries in the result.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n            display_name=\"Show Hidden\",\n            info=\"Whether to show hidden entries.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            display_name=\"Sync Token\",\n            info=\"Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_query\",\n            display_name=\"Query\",\n            info=\"Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_order_by\",\n            display_name=\"Order By\",\n            info=\"The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted events (with status equals 'cancelled') in the result.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_single_events\",\n            display_name=\"Single Events\",\n            info=\"Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.\",  # noqa: E501\n            show=False,\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n            display_name=\"Timemax\",\n            info=\"Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n            display_name=\"Timemin\",\n            info=\"Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n            display_name=\"Updated Min\",\n            info=\"Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_event_types\",\n            display_name=\"Event Types\",\n            info=\"List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Title of the calendar to be duplicated.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            display_name=\"Attendee Email\",\n            info=\"Email address of the attendee to be removed\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be fetched. Default is 'primary'.\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n            display_name=\"Event Type\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default'\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar. `primary` for interacting with the primary calendar.\",\n            show=False,\n            value=\"primary\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be deleted\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n            display_name=\"Time Min\",\n            info=\"The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n            display_name=\"Time Max\",\n            info=\"The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n            display_name=\"Timezone\",\n            info=\"Time zone used in the response. Optional. The default is UTC.\",\n            show=False,\n            value=\"UTC\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n            display_name=\"Group Expansion Max\",\n            info=\"Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.\",  # noqa: E501\n            show=False,\n            value=100,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n            display_name=\"Calendar Expansion Max\",\n            info=\"Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.\",  # noqa: E501\n            show=False,\n            value=50,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            display_name=\"Items\",\n            info=\"List of calendars ids for which to fetch\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_text\",\n            display_name=\"Text\",\n            info=\"The text describing the event to be created.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'\",  # noqa: E501\n            show=False,\n            value=\"none\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n            display_name=\"Description\",\n            info=\"Description of the calendar. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the calendar as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n            display_name=\"Title/Summary\",\n            info=\"Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.\",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            display_name=\"Timezone\",\n            info=\"The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\",\n            display_name=\"Timezone\",\n            info=\"The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.\",  # noqa: E501\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n            display_name=\"EventType\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.\",  # noqa: E501\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be updated\",\n            show=False,\n            required=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._list_variables and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"error\", {})\n                return {\"error\": message_str}\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if action_key == \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\":\n                return result_data\n            return result_data[next(iter(result_data))]\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Target calendar: 'primary' for the user's main calendar, or the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcdefghijklmnopqrstuvwxyz@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Number of minutes (0-59). Make absolutely sure this is less than 60. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_name": "Create Event",
                    "name": "googlecalendar_create_event",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_CREATE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar (e.g., email address, specific ID, or 'primary' for the authenticated user's main calendar) from which the event will be deleted. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcsomecalendarid@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event to delete, typically obtained upon event creation. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_name": "Delete Event",
                    "name": "googlecalendar_delete_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DELETE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "summary": {
                        "default": "",
                        "description": "Title for the new Google Calendar to be created. If an empty string is provided, the calendar will be created without a title. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Tasks",
                          "Marketing Team Q4",
                          "Personal Appointments"
                        ],
                        "title": "Summary",
                        "type": "string"
                      }
                    },
                    "description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_name": "Duplicate Calendar",
                    "name": "googlecalendar_duplicate_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DUPLICATE_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to query. Use 'primary' for the primary calendar of the authenticated user, an email address for a specific user's calendar, or a calendar ID for other calendars. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abc...@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_types": {
                        "default": [
                          "default",
                          "outOfOffice",
                          "focusTime",
                          "workingLocation"
                        ],
                        "description": "Event types to include: 'default' (regular event), 'focusTime' (focused work time), 'outOfOffice' (out-of-office time).",
                        "examples": [
                          "default",
                          "focusTime",
                          "outOfOffice"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Event Types",
                        "type": "array"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of events per page (1-2500). Please provide a value of type integer.",
                        "examples": [],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "order_by": {
                        "default": null,
                        "description": "Order of events: 'startTime' (ascending by start time) or 'updated' (ascending by last modification time). Please provide a value of type string.",
                        "examples": [
                          "startTime",
                          "updated"
                        ],
                        "title": "Order By",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token from a previous response's `nextPageToken` to fetch the subsequent page of results. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": null,
                        "description": "Free-text search terms to find events. This query is matched against various event fields including summary, description, location, attendees' details (displayName, email), and organizer's details. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Review",
                          "Birthday Party",
                          "Q3 Planning session"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": null,
                        "description": "Include deleted events (status 'cancelled') in the result. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "single_events": {
                        "default": true,
                        "description": "Expand recurring events into individual instances. If false, returns master recurring events. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Single Events",
                        "type": "boolean"
                      },
                      "timeMax": {
                        "default": null,
                        "description": "Upper bound (exclusive) for an event's start time to filter by. Only events starting before this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-12-31T23:59:59Z",
                          "2025-01-01 10:00:00"
                        ],
                        "title": "Timemax",
                        "type": "string"
                      },
                      "timeMin": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's end time to filter by. Only events ending after this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-01-01T00:00:00Z",
                          "2024-06-15 09:00:00"
                        ],
                        "title": "Timemin",
                        "type": "string"
                      },
                      "updated_min": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's last modification time to filter by. Only events updated after this time are included. When specified, events deleted since this time are also included, regardless of the `show_deleted` parameter. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-07-01T00:00:00Z"
                        ],
                        "title": "Updated Min",
                        "type": "string"
                      }
                    },
                    "description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_name": "Find Event",
                    "name": "googlecalendar_find_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_FIND_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_expansion_max": {
                        "default": 50,
                        "description": "Maximum calendars for which FreeBusy information is provided. Max allowed: 50. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Calendar Expansion Max",
                        "type": "integer"
                      },
                      "group_expansion_max": {
                        "default": 100,
                        "description": "Maximum calendar identifiers to return for a single group; exceeding this causes an error. Max allowed: 100. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Group Expansion Max",
                        "type": "integer"
                      },
                      "items": {
                        "default": [
                          "primary"
                        ],
                        "description": "List of calendar identifiers (primary ID 'primary', user/calendar email, or unique calendar ID) to query for free/busy information.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "unique_calendar_id@group.calendar.google.com"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Items",
                        "type": "array"
                      },
                      "time_max": {
                        "default": null,
                        "description": "End datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T18:00:00Z",
                          "2024,12,06,18,00,00",
                          "2024-12-06 18:00:00"
                        ],
                        "title": "Time Max",
                        "type": "string"
                      },
                      "time_min": {
                        "default": null,
                        "description": "Start datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T13:00:00Z",
                          "2024,12,06,13,00,00",
                          "2024-12-06 13:00:00"
                        ],
                        "title": "Time Min",
                        "type": "string"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') for interpreting `time_min` and `time_max` if they lack timezone info, and for expanding recurring events. Please provide a value of type string.",
                        "examples": [
                          "UTC",
                          "America/New_York",
                          "Europe/Berlin"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_name": "Find Free Slots",
                    "name": "googlecalendar_find_free_slots",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_FIND_FREE_SLOTS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to retrieve. 'primary' (the default) represents the user's main calendar; other valid identifiers include the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "en.usa#holiday@group.v.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_name": "Fetch Google Calendar",
                    "name": "googlecalendar_get_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_GET_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "timezone": {
                        "default": 0,
                        "description": "Timezone offset from UTC in hours (e.g., 6 for UTC+6, -9 for UTC-9, 5.5 for UTC+5:30). Default 0 is UTC. Please provide a value of type number.",
                        "examples": [
                          "6",
                          "-9",
                          "0",
                          "5.5"
                        ],
                        "title": "Timezone",
                        "type": "number"
                      }
                    },
                    "description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_name": "Get Current Date And Time",
                    "name": "googlecalendar_get_current_date_time",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_GET_CURRENT_DATE_TIME"
                    ]
                  },
                  {
                    "args": {
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of calendars to return per page. Max 250. Please provide a value of type integer.",
                        "examples": [
                          25,
                          100
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "min_access_role": {
                        "default": null,
                        "description": "Minimum access role for calendars returned. Valid values: 'freeBusyReader', 'owner', 'reader', 'writer'. Please provide a value of type string.",
                        "examples": [
                          "reader",
                          "owner"
                        ],
                        "title": "Min Access Role",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token for the page of results to return, from a previous response. Please provide a value of type string.",
                        "examples": [
                          " nextPageToken123"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": false,
                        "description": "Include deleted calendars in the result. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "show_hidden": {
                        "default": false,
                        "description": "Include calendars not typically shown in the UI. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Hidden",
                        "type": "boolean"
                      },
                      "sync_token": {
                        "default": null,
                        "description": "Sync token from a previous list request to get only changed entries; showDeleted, showHidden, and pageToken are ignored if provided. Please provide a value of type string.",
                        "examples": [
                          "syncToken123"
                        ],
                        "title": "Sync Token",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_name": "List Google Calendars",
                    "name": "googlecalendar_list_calendars",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_LIST_CALENDARS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "description": "Identifier of the Google Calendar to update; use 'primary' for the main calendar or a specific ID. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "primary",
                          "secondaryCalendarIdAbc...",
                          "example@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "description": {
                        "default": null,
                        "description": "New description for the calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "location": {
                        "default": null,
                        "description": "New geographic location of the calendar (e.g., 'Paris, France'). Please provide a value of type string.",
                        "examples": [
                          "Paris, France",
                          "London"
                        ],
                        "title": "Location",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New title for the calendar; cannot be an empty string. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Team Meetings",
                          "Project Alpha Milestones"
                        ],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "New IANA Time Zone Database name for the calendar (e.g., 'Europe/Zurich', 'America/New_York'). Please provide a value of type string.",
                        "examples": [
                          "Europe/Zurich",
                          "America/New_York",
                          "Asia/Tokyo"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_name": "Patch Calendar",
                    "name": "googlecalendar_patch_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_PATCH_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the calendar for the event. Use 'primary' for the main calendar, or provide a specific calendar ID (e.g., email address). Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "xxxxxxxxxxxxxxxxx@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "send_updates": {
                        "default": "none",
                        "description": "Controls whether email notifications about the event creation are sent to attendees. Please provide a value of type string.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "string"
                      },
                      "text": {
                        "default": "",
                        "description": "Natural language input describing the event; Google Calendar parses this for event details like title, date, and time. Please provide a value of type string.",
                        "examples": [
                          "Appointment at Somewhere on June 3rd 10am-10:25am",
                          "Dentist appointment tomorrow at 2pm for 45 minutes"
                        ],
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_name": "Quick Add Event",
                    "name": "googlecalendar_quick_add",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_QUICK_ADD"
                    ]
                  },
                  {
                    "args": {
                      "attendee_email": {
                        "description": "Email address of the attendee to remove; if the email does not match an existing attendee, the event remains unchanged. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@gmail.com"
                        ],
                        "title": "Attendee Email",
                        "type": "string"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to which the event belongs; 'primary' signifies the user's main calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_name": "Remove Attendee From Event",
                    "name": "googlecalendar_remove_attendee",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_REMOVE_ATTENDEE"
                    ]
                  },
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar where the event resides. The value 'primary' targets the user's primary calendar. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "long_calendar_id@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Number of minutes (0-59). Make absolutely sure this is less than 60. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "event_id": {
                        "description": "The unique identifier of the event to be updated. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "a1b2c3d4e5f6g7h8i9j0k1l2m3"
                        ],
                        "title": "Event Id",
                        "type": "string"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_name": "Update Google Event",
                    "name": "googlecalendar_update_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_UPDATE_EVENT"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ComposioGoogleCalendarAPIComponent"
        },
        "dragging": false,
        "id": "ComposioGoogleCalendarAPIComponent-7viXQ",
        "measured": {
          "height": 306,
          "width": 320
        },
        "position": {
          "x": 1455.7641873246253,
          "y": 932.0726149162862
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ComposioGoogleCalendarAPIComponent-S1x3W",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "composio",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Google Calendar API",
            "display_name": "Data and TIme",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "GOOGLECALENDAR_LIST_CALENDARS_max_results",
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
              "GOOGLECALENDAR_LIST_CALENDARS_page_token",
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
              "GOOGLECALENDAR_FIND_EVENT_calendar_id",
              "GOOGLECALENDAR_FIND_EVENT_query",
              "GOOGLECALENDAR_FIND_EVENT_max_results",
              "GOOGLECALENDAR_FIND_EVENT_order_by",
              "GOOGLECALENDAR_FIND_EVENT_show_deleted",
              "GOOGLECALENDAR_FIND_EVENT_single_events",
              "GOOGLECALENDAR_FIND_EVENT_timeMax",
              "GOOGLECALENDAR_FIND_EVENT_timeMin",
              "GOOGLECALENDAR_FIND_EVENT_updated_min",
              "GOOGLECALENDAR_FIND_EVENT_event_types",
              "GOOGLECALENDAR_FIND_EVENT_page_token",
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
              "GOOGLECALENDAR_CREATE_EVENT_description",
              "GOOGLECALENDAR_CREATE_EVENT_eventType",
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_CREATE_EVENT_location",
              "GOOGLECALENDAR_CREATE_EVENT_summary",
              "GOOGLECALENDAR_CREATE_EVENT_transparency",
              "GOOGLECALENDAR_CREATE_EVENT_visibility",
              "GOOGLECALENDAR_CREATE_EVENT_timezone",
              "GOOGLECALENDAR_CREATE_EVENT_recurrence",
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_CREATE_EVENT_attendees",
              "GOOGLECALENDAR_CREATE_EVENT_send_updates",
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_event_id",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
              "GOOGLECALENDAR_QUICK_ADD_calendar_id",
              "GOOGLECALENDAR_QUICK_ADD_text",
              "GOOGLECALENDAR_QUICK_ADD_send_updates",
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
              "GOOGLECALENDAR_PATCH_CALENDAR_description",
              "GOOGLECALENDAR_PATCH_CALENDAR_location",
              "GOOGLECALENDAR_PATCH_CALENDAR_summary",
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_description",
              "GOOGLECALENDAR_UPDATE_EVENT_eventType",
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_UPDATE_EVENT_location",
              "GOOGLECALENDAR_UPDATE_EVENT_summary",
              "GOOGLECALENDAR_UPDATE_EVENT_transparency",
              "GOOGLECALENDAR_UPDATE_EVENT_visibility",
              "GOOGLECALENDAR_UPDATE_EVENT_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_UPDATE_EVENT_attendees",
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
              "GOOGLECALENDAR_UPDATE_EVENT_event_id"
            ],
            "frozen": false,
            "icon": "Googlecalendar",
            "key": "ComposioGoogleCalendarAPIComponent",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.03289318164829356,
            "template": {
              "GOOGLECALENDAR_CREATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar. `primary` for interacting with the primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Type",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_CREATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_DELETE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be deleted",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Title of the calendar to be duplicated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_FIND_EVENT_event_types": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Types",
                "dynamic": false,
                "info": "List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_event_types",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_FIND_EVENT_order_by": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Order By",
                "dynamic": false,
                "info": "The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_order_by",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted events (with status equals 'cancelled') in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_FIND_EVENT_single_events": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Single Events",
                "dynamic": false,
                "info": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_single_events",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMax": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemax",
                "dynamic": false,
                "info": "Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMax",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMin": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemin",
                "dynamic": false,
                "info": "Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMin",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_updated_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Updated Min",
                "dynamic": false,
                "info": "Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_updated_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Calendar Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 50
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Group Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Items",
                "dynamic": false,
                "info": "List of calendars ids for which to fetch",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Max",
                "dynamic": false,
                "info": "The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Min",
                "dynamic": false,
                "info": "The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Time zone used in the response. Optional. The default is UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "UTC"
              },
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be fetched. Default is 'primary'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_LIST_CALENDARS_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Min Access Role",
                "dynamic": false,
                "info": "The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted calendar list entries in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Hidden",
                "dynamic": false,
                "info": "Whether to show hidden entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sync Token",
                "dynamic": false,
                "info": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be updated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the calendar. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the calendar as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title/Summary",
                "dynamic": false,
                "info": "Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_summary",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_QUICK_ADD_send_updates": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "none"
              },
              "GOOGLECALENDAR_QUICK_ADD_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "The text describing the event to be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_text",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendee Email",
                "dynamic": false,
                "info": "Email address of the attendee to be removed",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "EventType",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be updated",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GOOGLECALENDAR_UPDATE_EVENT",
                    "name": "Update Google Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_REMOVE_ATTENDEE",
                    "name": "Remove Attendee From Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME",
                    "name": "Get Current Date And Time"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_QUICK_ADD",
                    "name": "Quick Add Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_LIST_CALENDARS",
                    "name": "List Google Calendars"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_EVENT",
                    "name": "Find Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_CREATE_EVENT",
                    "name": "Create Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_FREE_SLOTS",
                    "name": "Find Free Slots"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_PATCH_CALENDAR",
                    "name": "Patch Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CALENDAR",
                    "name": "Fetch Google Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DELETE_EVENT",
                    "name": "Delete Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DUPLICATE_CALENDAR",
                    "name": "Duplicate Calendar"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": ""
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGoogleCalendarAPIComponent(ComposioBaseComponent):\n    \"\"\"Google Calendar API component for interacting with Google Calendar services.\"\"\"\n\n    display_name: str = \"Google Calendar\"\n    description: str = \"Google Calendar API\"\n    icon = \"Googlecalendar\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"googlecalendar\"\n\n    _actions_data: dict = {\n        \"GOOGLECALENDAR_UPDATE_EVENT\": {\n            \"display_name\": \"Update Google Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_UPDATE_EVENT_description\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_location\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_REMOVE_ATTENDEE\": {\n            \"display_name\": \"Remove Attendee From Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\": {\n            \"display_name\": \"Get Current Date And Time\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\"],\n        },\n        \"GOOGLECALENDAR_QUICK_ADD\": {\n            \"display_name\": \"Quick Add Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n                \"GOOGLECALENDAR_QUICK_ADD_text\",\n                \"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            ],\n        },\n        \"GOOGLECALENDAR_LIST_CALENDARS\": {\n            \"display_name\": \"List Google Calendars\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_EVENT\": {\n            \"display_name\": \"Find Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_FIND_EVENT_query\",\n                \"GOOGLECALENDAR_FIND_EVENT_max_results\",\n                \"GOOGLECALENDAR_FIND_EVENT_order_by\",\n                \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n                \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n                \"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n                \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n                \"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_CREATE_EVENT\": {\n            \"display_name\": \"Create Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_CREATE_EVENT_description\",\n                \"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_CREATE_EVENT_location\",\n                \"GOOGLECALENDAR_CREATE_EVENT_summary\",\n                \"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS\": {\n            \"display_name\": \"Find Free Slots\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            ],\n        },\n        \"GOOGLECALENDAR_PATCH_CALENDAR\": {\n            \"display_name\": \"Patch Calendar\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CALENDAR\": {\n            \"display_name\": \"Fetch Google Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\"],\n        },\n        \"GOOGLECALENDAR_DELETE_EVENT\": {\n            \"display_name\": \"Delete Event\",\n            \"action_fields\": [\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\", \"GOOGLECALENDAR_DELETE_EVENT_event_id\"],\n        },\n        \"GOOGLECALENDAR_DUPLICATE_CALENDAR\": {\n            \"display_name\": \"Duplicate Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\"],\n        },\n    }\n\n    _list_variables = {\n        \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n        \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n        \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n        \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n        \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n            display_name=\"Min Access Role\",\n            info=\"The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted calendar list entries in the result.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n            display_name=\"Show Hidden\",\n            info=\"Whether to show hidden entries.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            display_name=\"Sync Token\",\n            info=\"Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_query\",\n            display_name=\"Query\",\n            info=\"Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_order_by\",\n            display_name=\"Order By\",\n            info=\"The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted events (with status equals 'cancelled') in the result.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_single_events\",\n            display_name=\"Single Events\",\n            info=\"Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.\",  # noqa: E501\n            show=False,\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n            display_name=\"Timemax\",\n            info=\"Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n            display_name=\"Timemin\",\n            info=\"Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n            display_name=\"Updated Min\",\n            info=\"Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_event_types\",\n            display_name=\"Event Types\",\n            info=\"List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Title of the calendar to be duplicated.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            display_name=\"Attendee Email\",\n            info=\"Email address of the attendee to be removed\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be fetched. Default is 'primary'.\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n            display_name=\"Event Type\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default'\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar. `primary` for interacting with the primary calendar.\",\n            show=False,\n            value=\"primary\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be deleted\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n            display_name=\"Time Min\",\n            info=\"The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n            display_name=\"Time Max\",\n            info=\"The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n            display_name=\"Timezone\",\n            info=\"Time zone used in the response. Optional. The default is UTC.\",\n            show=False,\n            value=\"UTC\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n            display_name=\"Group Expansion Max\",\n            info=\"Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.\",  # noqa: E501\n            show=False,\n            value=100,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n            display_name=\"Calendar Expansion Max\",\n            info=\"Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.\",  # noqa: E501\n            show=False,\n            value=50,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            display_name=\"Items\",\n            info=\"List of calendars ids for which to fetch\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_text\",\n            display_name=\"Text\",\n            info=\"The text describing the event to be created.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'\",  # noqa: E501\n            show=False,\n            value=\"none\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n            display_name=\"Description\",\n            info=\"Description of the calendar. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the calendar as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n            display_name=\"Title/Summary\",\n            info=\"Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.\",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            display_name=\"Timezone\",\n            info=\"The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\",\n            display_name=\"Timezone\",\n            info=\"The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.\",  # noqa: E501\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n            display_name=\"EventType\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.\",  # noqa: E501\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be updated\",\n            show=False,\n            required=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._list_variables and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"error\", {})\n                return {\"error\": message_str}\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if action_key == \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\":\n                return result_data\n            return result_data[next(iter(result_data))]\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Target calendar: 'primary' for the user's main calendar, or the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcdefghijklmnopqrstuvwxyz@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Number of minutes (0-59). Make absolutely sure this is less than 60. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
                    "display_name": "Create Event",
                    "name": "googlecalendar_create_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_CREATE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar (e.g., email address, specific ID, or 'primary' for the authenticated user's main calendar) from which the event will be deleted. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcsomecalendarid@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event to delete, typically obtained upon event creation. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_name": "Delete Event",
                    "name": "googlecalendar_delete_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DELETE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "summary": {
                        "default": "",
                        "description": "Title for the new Google Calendar to be created. If an empty string is provided, the calendar will be created without a title. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Tasks",
                          "Marketing Team Q4",
                          "Personal Appointments"
                        ],
                        "title": "Summary",
                        "type": "string"
                      }
                    },
                    "description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_name": "Duplicate Calendar",
                    "name": "googlecalendar_duplicate_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DUPLICATE_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to query. Use 'primary' for the primary calendar of the authenticated user, an email address for a specific user's calendar, or a calendar ID for other calendars. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abc...@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_types": {
                        "default": [
                          "default",
                          "outOfOffice",
                          "focusTime",
                          "workingLocation"
                        ],
                        "description": "Event types to include: 'default' (regular event), 'focusTime' (focused work time), 'outOfOffice' (out-of-office time).",
                        "examples": [
                          "default",
                          "focusTime",
                          "outOfOffice"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Event Types",
                        "type": "array"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of events per page (1-2500). Please provide a value of type integer.",
                        "examples": [],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "order_by": {
                        "default": null,
                        "description": "Order of events: 'startTime' (ascending by start time) or 'updated' (ascending by last modification time). Please provide a value of type string.",
                        "examples": [
                          "startTime",
                          "updated"
                        ],
                        "title": "Order By",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token from a previous response's `nextPageToken` to fetch the subsequent page of results. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": null,
                        "description": "Free-text search terms to find events. This query is matched against various event fields including summary, description, location, attendees' details (displayName, email), and organizer's details. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Review",
                          "Birthday Party",
                          "Q3 Planning session"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": null,
                        "description": "Include deleted events (status 'cancelled') in the result. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "single_events": {
                        "default": true,
                        "description": "Expand recurring events into individual instances. If false, returns master recurring events. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Single Events",
                        "type": "boolean"
                      },
                      "timeMax": {
                        "default": null,
                        "description": "Upper bound (exclusive) for an event's start time to filter by. Only events starting before this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-12-31T23:59:59Z",
                          "2025-01-01 10:00:00"
                        ],
                        "title": "Timemax",
                        "type": "string"
                      },
                      "timeMin": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's end time to filter by. Only events ending after this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-01-01T00:00:00Z",
                          "2024-06-15 09:00:00"
                        ],
                        "title": "Timemin",
                        "type": "string"
                      },
                      "updated_min": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's last modification time to filter by. Only events updated after this time are included. When specified, events deleted since this time are also included, regardless of the `show_deleted` parameter. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-07-01T00:00:00Z"
                        ],
                        "title": "Updated Min",
                        "type": "string"
                      }
                    },
                    "description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_name": "Find Event",
                    "name": "googlecalendar_find_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_FIND_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_expansion_max": {
                        "default": 50,
                        "description": "Maximum calendars for which FreeBusy information is provided. Max allowed: 50. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Calendar Expansion Max",
                        "type": "integer"
                      },
                      "group_expansion_max": {
                        "default": 100,
                        "description": "Maximum calendar identifiers to return for a single group; exceeding this causes an error. Max allowed: 100. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Group Expansion Max",
                        "type": "integer"
                      },
                      "items": {
                        "default": [
                          "primary"
                        ],
                        "description": "List of calendar identifiers (primary ID 'primary', user/calendar email, or unique calendar ID) to query for free/busy information.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "unique_calendar_id@group.calendar.google.com"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Items",
                        "type": "array"
                      },
                      "time_max": {
                        "default": null,
                        "description": "End datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T18:00:00Z",
                          "2024,12,06,18,00,00",
                          "2024-12-06 18:00:00"
                        ],
                        "title": "Time Max",
                        "type": "string"
                      },
                      "time_min": {
                        "default": null,
                        "description": "Start datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T13:00:00Z",
                          "2024,12,06,13,00,00",
                          "2024-12-06 13:00:00"
                        ],
                        "title": "Time Min",
                        "type": "string"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') for interpreting `time_min` and `time_max` if they lack timezone info, and for expanding recurring events. Please provide a value of type string.",
                        "examples": [
                          "UTC",
                          "America/New_York",
                          "Europe/Berlin"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
                    "display_name": "Find Free Slots",
                    "name": "googlecalendar_find_free_slots",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_FIND_FREE_SLOTS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to retrieve. 'primary' (the default) represents the user's main calendar; other valid identifiers include the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "en.usa#holiday@group.v.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_name": "Fetch Google Calendar",
                    "name": "googlecalendar_get_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_GET_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "timezone": {
                        "default": 0,
                        "description": "Timezone offset from UTC in hours (e.g., 6 for UTC+6, -9 for UTC-9, 5.5 for UTC+5:30). Default 0 is UTC. Please provide a value of type number.",
                        "examples": [
                          "6",
                          "-9",
                          "0",
                          "5.5"
                        ],
                        "title": "Timezone",
                        "type": "number"
                      }
                    },
                    "description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_name": "Get Current Date And Time",
                    "name": "googlecalendar_get_current_date_time",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_GET_CURRENT_DATE_TIME"
                    ]
                  },
                  {
                    "args": {
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of calendars to return per page. Max 250. Please provide a value of type integer.",
                        "examples": [
                          25,
                          100
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "min_access_role": {
                        "default": null,
                        "description": "Minimum access role for calendars returned. Valid values: 'freeBusyReader', 'owner', 'reader', 'writer'. Please provide a value of type string.",
                        "examples": [
                          "reader",
                          "owner"
                        ],
                        "title": "Min Access Role",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token for the page of results to return, from a previous response. Please provide a value of type string.",
                        "examples": [
                          " nextPageToken123"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": false,
                        "description": "Include deleted calendars in the result. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "show_hidden": {
                        "default": false,
                        "description": "Include calendars not typically shown in the UI. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Hidden",
                        "type": "boolean"
                      },
                      "sync_token": {
                        "default": null,
                        "description": "Sync token from a previous list request to get only changed entries; showDeleted, showHidden, and pageToken are ignored if provided. Please provide a value of type string.",
                        "examples": [
                          "syncToken123"
                        ],
                        "title": "Sync Token",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_name": "List Google Calendars",
                    "name": "googlecalendar_list_calendars",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_LIST_CALENDARS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "description": "Identifier of the Google Calendar to update; use 'primary' for the main calendar or a specific ID. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "primary",
                          "secondaryCalendarIdAbc...",
                          "example@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "description": {
                        "default": null,
                        "description": "New description for the calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "location": {
                        "default": null,
                        "description": "New geographic location of the calendar (e.g., 'Paris, France'). Please provide a value of type string.",
                        "examples": [
                          "Paris, France",
                          "London"
                        ],
                        "title": "Location",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New title for the calendar; cannot be an empty string. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Team Meetings",
                          "Project Alpha Milestones"
                        ],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "New IANA Time Zone Database name for the calendar (e.g., 'Europe/Zurich', 'America/New_York'). Please provide a value of type string.",
                        "examples": [
                          "Europe/Zurich",
                          "America/New_York",
                          "Asia/Tokyo"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_name": "Patch Calendar",
                    "name": "googlecalendar_patch_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_PATCH_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the calendar for the event. Use 'primary' for the main calendar, or provide a specific calendar ID (e.g., email address). Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "xxxxxxxxxxxxxxxxx@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "send_updates": {
                        "default": "none",
                        "description": "Controls whether email notifications about the event creation are sent to attendees. Please provide a value of type string.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "string"
                      },
                      "text": {
                        "default": "",
                        "description": "Natural language input describing the event; Google Calendar parses this for event details like title, date, and time. Please provide a value of type string.",
                        "examples": [
                          "Appointment at Somewhere on June 3rd 10am-10:25am",
                          "Dentist appointment tomorrow at 2pm for 45 minutes"
                        ],
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
                    "display_name": "Quick Add Event",
                    "name": "googlecalendar_quick_add",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_QUICK_ADD"
                    ]
                  },
                  {
                    "args": {
                      "attendee_email": {
                        "description": "Email address of the attendee to remove; if the email does not match an existing attendee, the event remains unchanged. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@gmail.com"
                        ],
                        "title": "Attendee Email",
                        "type": "string"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to which the event belongs; 'primary' signifies the user's main calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_name": "Remove Attendee From Event",
                    "name": "googlecalendar_remove_attendee",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_REMOVE_ATTENDEE"
                    ]
                  },
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar where the event resides. The value 'primary' targets the user's primary calendar. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "long_calendar_id@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Number of minutes (0-59). Make absolutely sure this is less than 60. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "event_id": {
                        "description": "The unique identifier of the event to be updated. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "a1b2c3d4e5f6g7h8i9j0k1l2m3"
                        ],
                        "title": "Event Id",
                        "type": "string"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      }
                    },
                    "description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_name": "Update Google Event",
                    "name": "googlecalendar_update_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_UPDATE_EVENT"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ComposioGoogleCalendarAPIComponent"
        },
        "dragging": false,
        "id": "ComposioGoogleCalendarAPIComponent-S1x3W",
        "measured": {
          "height": 306,
          "width": 320
        },
        "position": {
          "x": 1851.1341020847212,
          "y": 1082.7324979351101
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Prompt-9wAFX",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "scheduled_task"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "edited": false,
            "error": null,
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "name": "",
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "hidden": false,
                "method": "build_prompt",
                "name": "prompt",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "priority": null,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
              },
              "scheduled_task": {
                "advanced": false,
                "display_name": "scheduled_task",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "scheduled_task",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "YOU ARE \"AdherenceMessengerAgent\", A POLITE, EMPATHETIC, AND RESPONSIBLE AGENT WHO SENDS A DAILY WHATSAPP MESSAGE TO A PATIENT TO CHECK WHETHER THEY HAVE COMPLETED THEIR SCHEDULED TASKS.\n\n###YOUR MISSION###\n1. READ THE DAILY TASK LIST FROM:\n   {scheduled_task}\n\n2. FOR EACH TASK:\n   - COMPOSE A GENTLE, FRIENDLY CHECK-IN WITH SUITABLE EMOJIS\n   - ASK IF THE TASK WAS COMPLETED\n   - PROVIDE A RESPONSE FORMAT FOR EACH TASK THAT THE PATIENT SHOULD FOLLOW (✅ / ❌)\n\n3. FINAL OBJECTIVE:\n   - SEND ONE COMBINED WHATSAPP MESSAGE INCLUDING:\n     - PATIENT-FRIENDLY LANGUAGE\n     - ONE LINE PER TASK\n     - CLEAR RESPONSE INSTRUCTION FOR EACH TASK\n     - NEVER INCLUDE JSON, TECHNICAL DETAILS, OR RAW DATA\n\n###TONE AND STYLE GUIDELINES###\n\n- BE RESPECTFUL AND WARM\n- USE FRIENDLY EMOJIS MATCHING EACH TASK CONTEXT\n- ENCOURAGE HONEST FEEDBACK WITHOUT PRESSURE\n- MAINTAIN CLARITY AND BREVITY\n\n###SAMPLE MESSAGE TEMPLATE FORMAT###\n\nHello Diya 🌸,  \nHope you're feeling well today! 🌞  \nJust a quick check-in to help keep your care plan on track. Have you completed the following tasks?\n\n🕘 9:00 AM – 💊 Take Amoxicillin\n✅ Yes / ❌ No\n\n🕚 11:00 AM – 🧘 Do breathing exercises\n✅ Yes / ❌ No\n\nPlease reply to this message with your responses just like this so we can track your progress 💪✨\n\nThank you, and take care! ❤️\n\n###WHAT NOT TO DO###\n\n- DO NOT USE TECHNICAL TERMS OR PLACEHOLDERS IN THE MESSAGE\n- NEVER INCLUDE RAW JSON, BRACKETS, OR CODE FORMATTING\n- NEVER BE HARSH, ROBOTIC, OR FORCEFUL\n- NEVER COMBINE TASKS IN A SINGLE YES/NO — EACH TASK MUST HAVE INDIVIDUAL FEEDBACK"
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt"
        },
        "id": "Prompt-9wAFX",
        "measured": {
          "height": 412,
          "width": 320
        },
        "position": {
          "x": 2287.882656088686,
          "y": 183.9875142550403
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TelegramMessageSender-XGcTf",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends a message via Telegram Bot API.",
            "display_name": "Telegram Message Sender",
            "documentation": "",
            "edited": true,
            "field_order": [
              "bot_token",
              "chat_id",
              "message"
            ],
            "frozen": false,
            "icon": "telegram",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "hidden": false,
                "method": "send_message",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "bot_token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Bot Token",
                "dynamic": false,
                "info": "Your Telegram bot token.",
                "input_types": [],
                "load_from_db": true,
                "name": "bot_token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "chat_id": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Chat ID",
                "dynamic": false,
                "info": "The Telegram chat ID to send the message to.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_id",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "5142690505"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\r\nfrom langflow.io import StrInput, SecretStrInput, MessageInput, Output\r\nfrom langflow.schema import Data\r\nimport requests\r\n\r\nclass TelegramMessageSender(Component):\r\n    display_name = \"Telegram Message Sender\"\r\n    description = \"Sends a message via Telegram Bot API.\"\r\n    icon = \"telegram\"\r\n    name = \"TelegramMessageSender\"\r\n\r\n    inputs = [\r\n        SecretStrInput(\r\n            name=\"bot_token\",\r\n            display_name=\"Bot Token\",\r\n            info=\"Your Telegram bot token.\",\r\n            required=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"chat_id\",\r\n            display_name=\"Chat ID\",\r\n            info=\"The Telegram chat ID to send the message to.\",\r\n            required=True,\r\n        ),\r\n        MessageInput(\r\n            name=\"message\",\r\n            display_name=\"Message\",\r\n            info=\"The message text to send.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"response\", display_name=\"Response\", method=\"send_message\"),\r\n    ]\r\n\r\n    def send_message(self, value=None) -> Data:\r\n        try:\r\n            # Extract values from Langflow message types or raw strings\r\n            chat_id = (\r\n                self.chat_id.text if hasattr(self.chat_id, \"text\") else str(self.chat_id)\r\n            )\r\n            message_text = (\r\n                self.message.text if hasattr(self.message, \"text\") else str(self.message)\r\n            )\r\n\r\n            url = f\"https://api.telegram.org/bot{self.bot_token}/sendMessage\"\r\n            payload = {\r\n                \"chat_id\": chat_id,\r\n                \"text\": message_text,\r\n                \"parse_mode\": \"HTML\"  # Optional: can use Markdown/HTML formatting\r\n            }\r\n\r\n            headers = {\"Content-Type\": \"application/json\"}\r\n            response = requests.post(url, json=payload, headers=headers)\r\n            response.raise_for_status()\r\n\r\n            return Data(data=response.json())\r\n\r\n        except requests.exceptions.RequestException as e:\r\n            self.log(f\"[TelegramMessageSender] Error sending message: {e}\")\r\n            return Data(data={\"error\": str(e)})\r\n"
              },
              "message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Message",
                "dynamic": false,
                "info": "The message text to send.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TelegramMessageSender"
        },
        "id": "TelegramMessageSender-XGcTf",
        "measured": {
          "height": 391,
          "width": 320
        },
        "position": {
          "x": 3249.975085655399,
          "y": 964.8371717480038
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-P3zgt",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_key",
              "openai_api_base",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "required_inputs": [
                  "openai_api_key"
                ],
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "chunk_size": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "client": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Client",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "client",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n"
              },
              "default_headers": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "list": false,
                "list_add_label": "Add More",
                "name": "default_headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "default_query": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "list": false,
                "list_add_label": "Add More",
                "name": "default_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "deployment": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deployment",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Dimensions",
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "list": false,
                "list_add_label": "Add More",
                "name": "dimensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "embedding_ctx_length": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_ctx_length",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1536
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text-embedding-3-small"
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "openai_api_base": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_type": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_type",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_version": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_version",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_organization": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_organization",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_proxy": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_proxy",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "show_progress_bar": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "show_progress_bar",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "skip_empty",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "list": false,
                "list_add_label": "Add More",
                "name": "tiktoken_enable",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tiktoken_model_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "id": "OpenAIEmbeddings-P3zgt",
        "measured": {
          "height": 312,
          "width": 320
        },
        "position": {
          "x": 102.54485097736381,
          "y": 771.7783174755281
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OpenAIModel-Rd92W",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "category": "models",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "key": "OpenAIModel",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.001,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import (\n    OPENAI_MODEL_NAMES,\n    OPENAI_REASONING_MODEL_NAMES,\n)\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\nfrom langflow.logging import logger\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[1],\n            combobox=True,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        parameters = {\n            \"api_key\": SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n            \"model_name\": self.model_name,\n            \"max_tokens\": self.max_tokens or None,\n            \"model_kwargs\": self.model_kwargs or {},\n            \"base_url\": self.openai_api_base or \"https://api.openai.com/v1\",\n            \"seed\": self.seed,\n            \"max_retries\": self.max_retries,\n            \"timeout\": self.timeout,\n            \"temperature\": self.temperature if self.temperature is not None else 0.1,\n        }\n\n        logger.info(f\"Model name: {self.model_name}\")\n        if self.model_name in OPENAI_REASONING_MODEL_NAMES:\n            logger.info(\"Getting reasoning model parameters\")\n            parameters.pop(\"temperature\")\n            parameters.pop(\"seed\")\n        output = ChatOpenAI(**parameters)\n        if self.json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_REASONING_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = False\n            build_config[\"seed\"][\"show\"] = False\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = True\n            build_config[\"seed\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIModel"
        },
        "id": "OpenAIModel-Rd92W",
        "measured": {
          "height": 614,
          "width": 320
        },
        "position": {
          "x": 2773.8074211339226,
          "y": 411.6306106911125
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "MongoDBAtlasVector-csU5Y",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "category": "vectorstores",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "MongoDB Atlas Vector Store with search capabilities",
            "display_name": "MongoDB Atlas",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mongodb_atlas_cluster_uri",
              "enable_mtls",
              "mongodb_atlas_client_cert",
              "db_name",
              "collection_name",
              "index_name",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "insert_mode",
              "embedding",
              "number_of_results",
              "index_field",
              "filter_field",
              "number_dimensions",
              "similarity",
              "quantization"
            ],
            "frozen": false,
            "icon": "MongoDB",
            "key": "MongoDBAtlasVector",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "method": "search_documents",
                "name": "search_results",
                "required_inputs": [
                  "collection_name",
                  "db_name",
                  "enable_mtls",
                  "index_field",
                  "index_name",
                  "mongodb_atlas_cluster_uri",
                  "number_dimensions"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "as_dataframe",
                "name": "dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0005559042572704037,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import tempfile\nimport time\n\nimport certifi\nfrom langchain_community.vectorstores import MongoDBAtlasVectorSearch\nfrom pymongo.collection import Collection\nfrom pymongo.operations import SearchIndexModel\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, SecretStrInput, StrInput\nfrom langflow.schema import Data\n\n\nclass MongoVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"MongoDB Atlas\"\n    description = \"MongoDB Atlas Vector Store with search capabilities\"\n    name = \"MongoDBAtlasVector\"\n    icon = \"MongoDB\"\n    INSERT_MODES = [\"append\", \"overwrite\"]\n    SIMILARITY_OPTIONS = [\"cosine\", \"euclidean\", \"dotProduct\"]\n    QUANTIZATION_OPTIONS = [\"scalar\", \"binary\"]\n    inputs = [\n        SecretStrInput(name=\"mongodb_atlas_cluster_uri\", display_name=\"MongoDB Atlas Cluster URI\", required=True),\n        BoolInput(name=\"enable_mtls\", display_name=\"Enable mTLS\", value=False, advanced=True, required=True),\n        SecretStrInput(\n            name=\"mongodb_atlas_client_cert\",\n            display_name=\"MongoDB Atlas Combined Client Certificate\",\n            required=False,\n            info=\"Client Certificate combined with the private key in the following format:\\n \"\n            \"-----BEGIN PRIVATE KEY-----\\n...\\n -----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\\n\"\n            \"...\\n-----END CERTIFICATE-----\\n\",\n        ),\n        StrInput(name=\"db_name\", display_name=\"Database Name\", required=True),\n        StrInput(name=\"collection_name\", display_name=\"Collection Name\", required=True),\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            required=True,\n            info=\"The name of Atlas Search index, it should be a Vector Search.\",\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"insert_mode\",\n            display_name=\"Insert Mode\",\n            options=INSERT_MODES,\n            value=INSERT_MODES[0],\n            info=\"How to insert new documents into the collection.\",\n            advanced=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n        StrInput(\n            name=\"index_field\",\n            display_name=\"Index Field\",\n            advanced=True,\n            required=True,\n            info=\"The field to index.\",\n            value=\"embedding\",\n        ),\n        StrInput(\n            name=\"filter_field\", display_name=\"Filter Field\", advanced=True, info=\"The field to filter the index.\"\n        ),\n        IntInput(\n            name=\"number_dimensions\",\n            display_name=\"Number of Dimensions\",\n            info=\"Embedding Context Length.\",\n            value=1536,\n            advanced=True,\n            required=True,\n        ),\n        DropdownInput(\n            name=\"similarity\",\n            display_name=\"Similarity\",\n            options=SIMILARITY_OPTIONS,\n            value=SIMILARITY_OPTIONS[0],\n            info=\"The method used to measure the similarity between vectors.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"quantization\",\n            display_name=\"Quantization\",\n            options=QUANTIZATION_OPTIONS,\n            value=None,\n            info=\"Quantization reduces memory costs converting 32-bit floats to smaller data types\",\n            advanced=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self) -> MongoDBAtlasVectorSearch:\n        try:\n            from pymongo import MongoClient\n        except ImportError as e:\n            msg = \"Please install pymongo to use MongoDB Atlas Vector Store\"\n            raise ImportError(msg) from e\n\n        # Create temporary files for the client certificate\n        if self.enable_mtls:\n            client_cert_path = None\n            try:\n                client_cert = self.mongodb_atlas_client_cert.replace(\" \", \"\\n\")\n                client_cert = client_cert.replace(\"-----BEGIN\\nPRIVATE\\nKEY-----\", \"-----BEGIN PRIVATE KEY-----\")\n                client_cert = client_cert.replace(\n                    \"-----END\\nPRIVATE\\nKEY-----\\n-----BEGIN\\nCERTIFICATE-----\",\n                    \"-----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\",\n                )\n                client_cert = client_cert.replace(\"-----END\\nCERTIFICATE-----\", \"-----END CERTIFICATE-----\")\n                with tempfile.NamedTemporaryFile(delete=False) as client_cert_file:\n                    client_cert_file.write(client_cert.encode(\"utf-8\"))\n                    client_cert_path = client_cert_file.name\n\n            except Exception as e:\n                msg = f\"Failed to write certificate to temporary file: {e}\"\n                raise ValueError(msg) from e\n\n        try:\n            mongo_client: MongoClient = (\n                MongoClient(\n                    self.mongodb_atlas_cluster_uri,\n                    tls=True,\n                    tlsCertificateKeyFile=client_cert_path,\n                    tlsCAFile=certifi.where(),\n                )\n                if self.enable_mtls\n                else MongoClient(self.mongodb_atlas_cluster_uri)\n            )\n\n            collection = mongo_client[self.db_name][self.collection_name]\n\n        except Exception as e:\n            msg = f\"Failed to connect to MongoDB Atlas: {e}\"\n            raise ValueError(msg) from e\n\n        # Convert DataFrame to Data if needed using parent's method\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n\n        if documents:\n            self.__insert_mode(collection)\n\n            return MongoDBAtlasVectorSearch.from_documents(\n                documents=documents, embedding=self.embedding, collection=collection, index_name=self.index_name\n            )\n        return MongoDBAtlasVectorSearch(embedding=self.embedding, collection=collection, index_name=self.index_name)\n\n    def search_documents(self) -> list[Data]:\n        from bson.objectid import ObjectId\n\n        vector_store = self.build_vector_store()\n\n        self.verify_search_index(vector_store._collection)\n\n        if self.search_query and isinstance(self.search_query, str):\n            docs = vector_store.similarity_search(\n                query=self.search_query,\n                k=self.number_of_results,\n            )\n            for doc in docs:\n                doc.metadata = {\n                    key: str(value) if isinstance(value, ObjectId) else value for key, value in doc.metadata.items()\n                }\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        return []\n\n    def __insert_mode(self, collection: Collection) -> None:\n        if self.insert_mode == \"overwrite\":\n            collection.delete_many({})  # Delete all documents while preserving collection structure\n\n    def verify_search_index(self, collection: Collection) -> None:\n        \"\"\"Verify if the search index exists, if not, create it.\n\n        Args:\n            collection (Collection): The collection to verify the search index on.\n        \"\"\"\n        indexes = collection.list_search_indexes()\n\n        index_names_types = {idx[\"name\"]: idx[\"type\"] for idx in indexes}\n        index_names = list(index_names_types.keys())\n        index_type = index_names_types.get(self.index_name)\n        if self.index_name not in index_names and index_type != \"vectorSearch\":\n            collection.create_search_index(self.__create_index_definition())\n\n            time.sleep(20)  # Give some time for index to be ready\n\n    def __create_index_definition(self) -> SearchIndexModel:\n        fields = [\n            {\n                \"type\": \"vector\",\n                \"path\": self.index_field,\n                \"numDimensions\": self.number_dimensions,\n                \"similarity\": self.similarity,\n                \"quantization\": self.quantization,\n            }\n        ]\n        if self.filter_field:\n            fields.append({\"type\": \"filter\", \"path\": self.filter_field})\n        return SearchIndexModel(definition={\"fields\": fields}, name=self.index_name, type=\"vectorSearch\")\n"
              },
              "collection_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Scheduled_Tasks"
              },
              "db_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Database Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "db_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Care_Plan"
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "enable_mtls": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Enable mTLS",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "enable_mtls",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "filter_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Filter Field",
                "dynamic": false,
                "info": "The field to filter the index.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "filter_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "index_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Index Field",
                "dynamic": false,
                "info": "The field to index.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_field",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "embedding"
              },
              "index_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "The name of Atlas Search index, it should be a Vector Search.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "index"
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "insert_mode": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Insert Mode",
                "dynamic": false,
                "info": "How to insert new documents into the collection.",
                "name": "insert_mode",
                "options": [
                  "append",
                  "overwrite"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "append"
              },
              "mongodb_atlas_client_cert": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "MongoDB Atlas Combined Client Certificate",
                "dynamic": false,
                "info": "Client Certificate combined with the private key in the following format:\n -----BEGIN PRIVATE KEY-----\n...\n -----END PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n",
                "input_types": [],
                "load_from_db": false,
                "name": "mongodb_atlas_client_cert",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "mongodb_atlas_cluster_uri": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "MongoDB Atlas Cluster URI",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "mongodb_atlas_cluster_uri",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "number_dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Dimensions",
                "dynamic": false,
                "info": "Embedding Context Length.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_dimensions",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1536
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "quantization": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Quantization",
                "dynamic": false,
                "info": "Quantization reduces memory costs converting 32-bit floats to smaller data types",
                "name": "quantization",
                "options": [
                  "scalar",
                  "binary"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "similarity": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Similarity",
                "dynamic": false,
                "info": "The method used to measure the similarity between vectors.",
                "name": "similarity",
                "options": [
                  "cosine",
                  "euclidean",
                  "dotProduct"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "cosine"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "MongoDBAtlasVector"
        },
        "id": "MongoDBAtlasVector-csU5Y",
        "measured": {
          "height": 800,
          "width": 320
        },
        "position": {
          "x": 3077.672302615242,
          "y": 1480.1747675913111
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-g6F9n",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "default_headers",
              "default_query",
              "chunk_size",
              "client",
              "deployment",
              "embedding_ctx_length",
              "max_retries",
              "model",
              "model_kwargs",
              "openai_api_key",
              "openai_api_base",
              "openai_api_type",
              "openai_api_version",
              "openai_organization",
              "openai_proxy",
              "request_timeout",
              "show_progress_bar",
              "skip_empty",
              "tiktoken_model_name",
              "tiktoken_enable",
              "dimensions"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "required_inputs": [
                  "openai_api_key"
                ],
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "chunk_size": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunk_size",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "client": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Client",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "client",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n"
              },
              "default_headers": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "info": "Default headers to use for the API request.",
                "list": false,
                "list_add_label": "Add More",
                "name": "default_headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "default_query": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "info": "Default query parameters to use for the API request.",
                "list": false,
                "list_add_label": "Add More",
                "name": "default_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "deployment": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deployment",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "dimensions": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Dimensions",
                "dynamic": false,
                "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                "list": false,
                "list_add_label": "Add More",
                "name": "dimensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "embedding_ctx_length": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_ctx_length",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1536
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "text-embedding-3-small"
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "openai_api_base": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "openai_api_type": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_type",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_api_version": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_version",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_organization": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_organization",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "openai_proxy": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_proxy",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "show_progress_bar": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "show_progress_bar",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "skip_empty",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "info": "If False, you must have transformers installed.",
                "list": false,
                "list_add_label": "Add More",
                "name": "tiktoken_enable",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tiktoken_model_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIEmbeddings"
        },
        "id": "OpenAIEmbeddings-g6F9n",
        "measured": {
          "height": 312,
          "width": 320
        },
        "position": {
          "x": 2549.815538547222,
          "y": 1922.4752859952696
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "StructuredOutput-Uu1Oz",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "category": "helpers",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "display_name": "Structured Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "llm",
              "input_value",
              "system_prompt",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "frozen": false,
            "icon": "braces",
            "key": "StructuredOutput",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "name": "structured_output",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": false,
                "method": "as_dataframe",
                "name": "structured_output_dataframe",
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.007568328950209746,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pydantic import BaseModel, Field, create_model\nfrom trustcall import create_extractor\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TableInput,\n)\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.table import EditMode\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Format Instructions\",\n            info=\"The instructions to the language model for formatting the output.\",\n            value=(\n                \"You are an AI system designed to extract structured information from unstructured text.\"\n                \"Given the input_text, return a JSON object with predefined keys based on the expected structure.\"\n                \"Extract values accurately and format them according to the specified type \"\n                \"(e.g., string, integer, float, date).\"\n                \"If a value is missing or cannot be determined, return a default \"\n                \"(e.g., null, 0, or 'N/A').\"\n                \"If multiple instances of the expected structure exist within the input_text, \"\n                \"stream each as a separate JSON object.\"\n            ),\n            required=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            # TODO: remove deault value\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                    \"edit_mode\": EditMode.INLINE,\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                    \"edit_mode\": EditMode.POPOVER,\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"edit_mode\": EditMode.INLINE,\n                    \"description\": (\"Indicate the data type of the output field (e.g., str, int, float, bool, dict).\"),\n                    \"options\": [\"str\", \"int\", \"float\", \"bool\", \"dict\"],\n                    \"default\": \"str\",\n                },\n            ],\n            value=[\n                {\n                    \"name\": \"field\",\n                    \"description\": \"description of field\",\n                    \"type\": \"str\",\n                    \"multiple\": \"False\",\n                }\n            ],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"[Deprecated] Always set to True\",\n            value=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"structured_output\",\n            display_name=\"Structured Output\",\n            method=\"build_structured_output\",\n        ),\n        Output(\n            name=\"structured_output_dataframe\",\n            display_name=\"DataFrame\",\n            method=\"as_dataframe\",\n        ),\n    ]\n\n    def build_structured_output_base(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n\n        output_model = create_model(\n            schema_name,\n            __doc__=f\"A list of {schema_name}.\",\n            objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n        )\n\n        try:\n            llm_with_structured_output = create_extractor(self.llm, tools=[output_model])\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        result = get_chat_result(\n            runnable=llm_with_structured_output,\n            system_message=self.system_prompt,\n            input_value=self.input_value,\n            config=config_dict,\n        )\n        if isinstance(result, BaseModel):\n            result = result.model_dump()\n        if responses := result.get(\"responses\"):\n            result = responses[0].model_dump()\n        if result and \"objects\" in result:\n            return result[\"objects\"]\n\n        return result\n\n    def build_structured_output(self) -> Data:\n        output = self.build_structured_output_base()\n\n        return Data(text_key=\"results\", data={\"results\": output})\n\n    def as_dataframe(self) -> DataFrame:\n        output = self.build_structured_output_base()\n        if isinstance(output, list):\n            return DataFrame(data=output)\n        return DataFrame(data=[output])\n"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "The input message to the language model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "llm": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Language Model",
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "input_types": [
                  "LanguageModel"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "llm",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "multiple": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Generate Multiple",
                "dynamic": false,
                "info": "[Deprecated] Always set to True",
                "list": false,
                "list_add_label": "Add More",
                "name": "multiple",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "output_schema": {
                "_input_type": "TableInput",
                "advanced": false,
                "display_name": "Output Schema",
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "output_schema",
                "placeholder": "",
                "required": true,
                "show": true,
                "table_icon": "Table",
                "table_schema": {
                  "columns": [
                    {
                      "default": "field",
                      "description": "Specify the name of the output field.",
                      "disable_edit": false,
                      "display_name": "Name",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "name",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "description of field",
                      "description": "Describe the purpose of the output field.",
                      "disable_edit": false,
                      "display_name": "Description",
                      "edit_mode": "popover",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "description",
                      "sortable": true,
                      "type": "str"
                    },
                    {
                      "default": "str",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, dict).",
                      "disable_edit": false,
                      "display_name": "Type",
                      "edit_mode": "inline",
                      "filterable": true,
                      "formatter": "text",
                      "hidden": false,
                      "name": "type",
                      "options": [
                        "str",
                        "int",
                        "float",
                        "bool",
                        "dict"
                      ],
                      "sortable": true,
                      "type": "str"
                    }
                  ]
                },
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "trigger_icon": "Table",
                "trigger_text": "Open table",
                "type": "table",
                "value": [
                  {
                    "description": "just Whole Text don't change anything , write in json format only ",
                    "multiple": "False",
                    "name": "text",
                    "type": "str"
                  }
                ]
              },
              "schema_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Schema Name",
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "schema_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Format Instructions",
                "dynamic": false,
                "info": "The instructions to the language model for formatting the output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are an AI system designed to validate and standardize JSON input.\nGiven a single json_object as input, return exactly the same JSON structure inside a field named \"text\" (as a stringified JSON).\n\nDo not modify the content or values.\n\nDo not infer or change missing values.\n\nJust wrap the original JSON object into a new object with this structure:\n\n{\n  \"text\": \"{...original JSON...}\"\n}\nThe \"text\" value must contain the entire original JSON as a string — including all nested objects and arrays — properly escaped and formatted."
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "StructuredOutput"
        },
        "dragging": false,
        "id": "StructuredOutput-Uu1Oz",
        "measured": {
          "height": 612,
          "width": 320
        },
        "position": {
          "x": 2548.9242712320147,
          "y": 1200.6341948106885
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "OpenAIModel-JOGgG",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "text_response",
                "name": "text_output",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Language Model",
                "hidden": false,
                "method": "build_model",
                "name": "model_output",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "LanguageModel",
                "tool_mode": true,
                "types": [
                  "LanguageModel"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import (\n    OPENAI_MODEL_NAMES,\n    OPENAI_REASONING_MODEL_NAMES,\n)\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\nfrom langflow.logging import logger\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES + OPENAI_REASONING_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[1],\n            combobox=True,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            show=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        parameters = {\n            \"api_key\": SecretStr(self.api_key).get_secret_value() if self.api_key else None,\n            \"model_name\": self.model_name,\n            \"max_tokens\": self.max_tokens or None,\n            \"model_kwargs\": self.model_kwargs or {},\n            \"base_url\": self.openai_api_base or \"https://api.openai.com/v1\",\n            \"seed\": self.seed,\n            \"max_retries\": self.max_retries,\n            \"timeout\": self.timeout,\n            \"temperature\": self.temperature if self.temperature is not None else 0.1,\n        }\n\n        logger.info(f\"Model name: {self.model_name}\")\n        if self.model_name in OPENAI_REASONING_MODEL_NAMES:\n            logger.info(\"Getting reasoning model parameters\")\n            parameters.pop(\"temperature\")\n            parameters.pop(\"seed\")\n        output = ChatOpenAI(**parameters)\n        if self.json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_REASONING_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = False\n            build_config[\"seed\"][\"show\"] = False\n        if field_name in {\"base_url\", \"model_name\", \"api_key\"} and field_value in OPENAI_MODEL_NAMES:\n            build_config[\"temperature\"][\"show\"] = True\n            build_config[\"seed\"][\"show\"] = True\n        return build_config\n"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "stream": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "list_add_label": "Add More",
                "name": "stream",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message to pass to the model.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "OpenAIModel"
        },
        "dragging": false,
        "id": "OpenAIModel-JOGgG",
        "measured": {
          "height": 614,
          "width": 320
        },
        "position": {
          "x": 2088.2142102485923,
          "y": 1589.0505595633495
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-zTX12",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "p_1001 and aarav"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "id": "TextInput-zTX12",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 20.83907108442395,
          "y": 218.50545187695855
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-y3xB6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "outputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "key": "ChatOutput",
            "legacy": false,
            "lf_version": "1.4.3",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003169567463043492,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "id": "ChatOutput-y3xB6",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 2443.9548175365157,
          "y": 881.2885334617741
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": -653.8586872436172,
      "y": -207.58313101606976,
      "zoom": 0.5942082863677257
    }
  },
  "description": " Automatically generates and updates personalized care tasks (medications, exercises, check-ins) based on patient profiles and care plans.",
  "endpoint_name": null,
  "id": "f52b43f7-dbff-4211-ba64-aebcbc27f7ed",
  "is_component": false,
  "last_tested_version": "1.4.3",
  "name": "Task Schedular Agent",
  "tags": []
}